{"version":3,"sources":["components/Filter.js","services/personService.js","components/PersonForm.js","components/Person.js","components/Numbers.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","value","newFilter","onChange","handleFilterChange","baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","PersonForm","onSubmit","event","preventDefault","personObj","name","newName","number","newNumber","testi","persons","forEach","person","window","confirm","personService","console","log","setMessage","setTimeout","returnedPerson","setPersons","concat","catch","error","setErrorMessage","message","setShow","setNewName","setNewNumber","handleNameChange","handleNumberChange","type","Person","onClick","handler","Numbers","personsToShow","map","key","Notification","className","App","useState","setNewFilter","show","errorMessage","useEffect","target","filtteri","filter","toLowerCase","includes","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c548dd3.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = (props) => {\n\n    return(\n        <form>\n            <div>\n                filter shown with <input\n                              value={props.newFilter}\n                              onChange={props.handleFilterChange}\n            />\n            </div>\n        </form>\n    )\n}\nexport default Filter","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n  }\n  \n  const update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n  }\n\n  const deleteById = (id) =>{\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n  }\n\n  export default { getAll, create, update, deleteById }","import personService from '../services/personService'\nimport React from 'react'\n\n\n\nconst PersonForm = (props) =>{\n\n    const addName = (event) =>{\n\n        //prevent default action (refreshing the page)\n        event.preventDefault()\n    \n        //create a person object which is added to persons on submit\n        const personObj ={\n          name: props.newName,\n          number: props.newNumber\n        }\n    \n        //check if name alrady exists\n        let testi = false\n        let id = 0\n        props.persons.forEach(person => {\n            if(person.name === personObj.name) {\n              testi = true\n              id = person.id\n            }\n          }\n        )\n        //conditions based on if name existed\n        if (testi===true &&\n          window.confirm(`${props.newName} is already added to phonebook, replace the old number with a new one?`)){\n          \n          personService\n            .update(id, personObj)\n            .then(response =>\n              console.log(response))\n\n              props.setMessage(`Changed the number of ${personObj.name} to ${personObj.number}`)\n              setTimeout(() => {\n                props.setMessage(null)\n              }, 5000)\n\n          \n\n        } else if (testi!==true){\n\n        \n\n          personService\n          .create(personObj)\n          .then(returnedPerson => {\n            props.setPersons(props.persons.concat(returnedPerson))\n            props.setMessage(`Added ${personObj.name}`)\n            setTimeout(() => {\n              props.setMessage(null)\n            }, 5000)\n           })\n          .catch(error => {\n            props.setErrorMessage(error.message)\n            setTimeout(() => {\n              props.setErrorMessage(null)\n            }, 5000)\n          })\n        }\n\n        personService\n            .getAll()\n            .then(response => {\n              props.setPersons(response)\n              props.setShow(response)\n          })\n        \n        //reset the form\n        props.setNewName('')\n        props.setNewNumber('')      \n      }\n\n    return(\n        <form onSubmit={addName}>\n        <div>\n          name: <input \n                    value={props.newName}\n                    onChange={props.handleNameChange}    \n                />\n        </div>\n        <div>\n          number: <input \n                    value={props.newNumber}\n                    onChange={props.handleNumberChange}    \n                />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Person = (props) => {\n    return(\n        <p>\n            {props.name} {props.number}\n            <button onClick={() => props.handler(props.id, props.name)}>delete</button>\n        </p>\n    )\n}\n\nexport default Person","import React from 'react'\nimport Person from './Person'\n\nconst Numbers = (props) => {\n    return(\n        <ul>\n        {props.personsToShow.map(person =>\n          <li key={person.id}>\n            <Person name={person.name} \n                    number={person.number} \n                    id={person.id}\n                    handler={props.handler}/>\n          </li>\n          \n        )}\n      </ul>\n    )\n}\n\nexport default Numbers","import React from 'react'\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={type}>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import React, { useEffect, useState } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Numbers from './components/Numbers'\nimport personService from './services/personService'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  \n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [ show, setShow ] = useState([])\n  const [ message, setMessage] = useState(null)\n  const [ errorMessage, setErrorMessage] = useState(null)\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value) //keeps track of the text on the form\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setNewFilter(event.target.value)\n    let filtteri = event.target.value\n    console.log('filter', filtteri)\n    if(filtteri===null){\n      setShow(persons)\n    }else{\n      setShow(persons.filter(person => person.name.toLowerCase().includes(filtteri)))\n    }\n  }\n  const handleDelete = (id, name) => {\n\n    if(window.confirm(`Delete \"${name}\"?`)){\n    personService\n      .deleteById(id)\n      .then(response => {\n        console.log('after delete responde: ', response)\n        setMessage(`${name} deleted succesfully`)\n        setTimeout(() =>{\n          setMessage(null)\n        }, 5000)\n      })\n      .catch(error => {\n        setErrorMessage(`${name} was already deleted`)\n        setTimeout(() =>{\n          setErrorMessage(null)\n        }, 5000)\n      })\n\n    personService\n      .getAll()\n      .then(response => {\n          setPersons(response)\n          setShow(response)\n      })\n    }\n    \n  }\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        console.log('response', response)\n        setPersons(response)\n        setShow(response)\n      })\n  }, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification message={message} type='message'/>\n      <Notification message={errorMessage} type='error'/>\n\n\n      <Filter newFilter={newFilter} handleFilterChange={handleFilterChange}/>\n\n      <h3>add a new</h3>\n      \n      <PersonForm newName={newName} \n                  handleNameChange = {handleNameChange}\n                  newNumber={newNumber}\n                  handleNumberChange={handleNumberChange}\n                  setNewName={setNewName}\n                  setNewNumber={setNewNumber}\n                  setPersons={setPersons}\n                  persons={persons}\n                  setShow={setShow}\n                  setMessage={setMessage}\n                  setErrorMessage={setErrorMessage}\n      />\n\n      <h2>Numbers</h2>\n        <Numbers personsToShow={show} handler={handleDelete}/>\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}